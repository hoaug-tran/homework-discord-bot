import { SlashCommandBuilder, EmbedBuilder } from "discord.js";
import dotenv from "dotenv";
dotenv.config();

export const data = new SlashCommandBuilder()
  .setName("random")
  .setDescription("Random s·ªë ho·∫∑c t·ª´ danh s√°ch/ng∆∞·ªùi")
  .addStringOption((option) =>
    option
      .setName("tieu_de")
      .setDescription("Ti√™u ƒë·ªÅ random (ch·ªâ √°p d·ª•ng cho random danh_sach)")
      .setRequired(false)
  )
  .addStringOption((option) =>
    option
      .setName("dieu_kien")
      .setDescription("Random 1 s·ªë trong kho·∫£ng c·ª• th·ªÉ (v√≠ d·ª•: 1 100)")
      .setRequired(false)
  )
  .addIntegerOption((option) =>
    option
      .setName("han")
      .setDescription("S·ªë gi√¢y ƒë·∫øm ng∆∞·ª£c tr∆∞·ªõc khi c√¥ng b·ªë k·∫øt qu·∫£")
      .setMinValue(1)
      .setMaxValue(60)
      .setRequired(false)
  )
  .addStringOption((option) =>
    option
      .setName("danh_sach")
      .setDescription(
        "Danh s√°ch t√™n ho·∫∑c g√¨ ƒë√≥ ... , c√°ch nhau b·ªüi d·∫•u ph·∫©y (,)"
      )
      .setRequired(false)
  );

export async function execute(interaction) {
  const dk = interaction.options.getString("dieu_kien");
  const han = interaction.options.getInteger("han") ?? 0;
  const danhSachRaw = interaction.options.getString("danh_sach");
  const tieuDe = interaction.options.getString("tieu_de");
  const ADMIN_ROLE_ID = process.env.ADMIN_ROLE_ID;
  const FIXED_ROLE_ID = process.env.FIXED_ROLE_ID;
  const isAdmin = interaction.member.roles.cache.has(ADMIN_ROLE_ID);

  let mode,
    candidates = [];

  // Random s·ªë
  if (dk) {
    const parts = dk.trim().split(/\s+/).map(Number);
    if (parts.length === 2 && !parts.some(isNaN) && parts[0] <= parts[1]) {
      for (let i = parts[0]; i <= parts[1]; i++) candidates.push(i);
      mode = "number";
    } else {
      return interaction.reply({
        content: "‚ùå C√∫ ph√°p `dieu_kien` kh√¥ng h·ª£p l·ªá. D√πng: `1 100`",
        flags: 1 << 6,
      });
    }
  }
  // Random danh s√°ch nh·∫≠p tay
  else if (danhSachRaw) {
    candidates = danhSachRaw
      .split(",")
      .map((s) => s.trim())
      .filter(Boolean);
    if (!candidates.length) {
      return interaction.reply({
        content: "‚ùå Danh s√°ch kh√¥ng h·ª£p l·ªá.",
        flags: 1 << 6,
      });
    }
    mode = "list";
  }
  // Random ng∆∞·ªùi trong role c·ªë ƒë·ªãnh (admin-only)
  else if (isAdmin && FIXED_ROLE_ID) {
    const allMembers = await interaction.guild.members.fetch();
    const members = allMembers.filter(
      (m) => m.roles.cache.has(FIXED_ROLE_ID) && !m.user.bot
    );
    if (members.size > 0) {
      candidates = members.map((m) => m.displayName);
      mode = "role";
    } else {
      return interaction.reply({
        content:
          "‚ùå Kh√¥ng t√¨m th·∫•y th√†nh vi√™n n√†o h·ª£p l·ªá trong role ƒë·ªÉ random.",
        flags: 1 << 6,
      });
    }
  } else {
    return interaction.reply({
      content:
        "‚ùå H√£y nh·∫≠p `dieu_kien` ho·∫∑c `danh_sach`, ho·∫∑c b·∫°n c·∫ßn quy·ªÅn admin ƒë·ªÉ random role.",
      flags: 1 << 6,
    });
  }

  // Animation quay s·ªë
  let targetDesc = "";
  if (
    (mode === "list" || mode === "role") &&
    tieuDe &&
    tieuDe.trim().length > 0
  ) {
    targetDesc = `**${tieuDe}**\n\n`;
  }

  let desc =
    han > 0
      ? `${targetDesc}ƒê·∫øm ng∆∞·ª£c \`${han}\` gi√¢y...\nQuay s·ªë ng·∫´u nhi√™n ƒëang di·ªÖn ra...`
      : `${targetDesc}ƒêang x·ª≠ l√Ω k·∫øt qu·∫£...`;

  const loadingEmbed = new EmbedBuilder()
    .setTitle("ƒêANG QUAY RANDOM...")
    .setDescription(desc)
    .setColor(0xf1c40f)
    .setTimestamp();
  await interaction.reply({ embeds: [loadingEmbed] });

  if (han > 0) {
    for (let i = 0; i < han; i++) {
      const temp = candidates[Math.floor(Math.random() * candidates.length)];
      const rollingDesc =
        `${targetDesc}` +
        `ƒê·∫øm ng∆∞·ª£c \`${han - i}\` gi√¢y...\n` +
        `üé≤ ƒêang quay random: **${temp}**`;
      const rollingEmbed =
        EmbedBuilder.from(loadingEmbed).setDescription(rollingDesc);
      await interaction.editReply({ embeds: [rollingEmbed] });
      await new Promise((r) => setTimeout(r, 1000));
    }
  }
  const result = candidates[Math.floor(Math.random() * candidates.length)];

  // K·∫øt qu·∫£
  let resultEmbed;
  if (mode === "number") {
    resultEmbed = new EmbedBuilder()
      .setTitle("K·∫æT QU·∫¢ RANDOM S·ªê")
      .setDescription(`Con s·ªë may m·∫Øn ƒë√≥ l√†: \`${result}\`\u2003üéâ`)
      .setColor(0x3498db)
      .setTimestamp();
  } else {
    resultEmbed = new EmbedBuilder()
      .setTitle(tieuDe && tieuDe.trim().length > 0 ? tieuDe : "K·∫æT QU·∫¢ RANDOM")
      .setDescription(
        `Ng∆∞·ªùi may m·∫Øn ƒë√≥ l√† **${result}**.\n Xin ch√∫c m·ª´ng b·∫°n !\u2003üéâ`
      )
      .setColor(0x2ecc71)
      .setTimestamp();
  }
  return interaction.editReply({ embeds: [resultEmbed] });
}
